{"version":3,"file":"react-query.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/react/QueryClientProvider.tsx","../src/react/QueryErrorResetBoundary.tsx","../src/react/useIsMounted.ts","../src/react/useIsFetching.ts","../src/react/useMutation.ts","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/useQueries.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryKeyHashFunction,\n  QueryOptions,\n  QueryStatus,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<TOptions extends QueryOptions<any, any, any>>(\n  arg1: QueryKey | TOptions,\n  arg2?: QueryFunction<any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      const hashFn = getQueryKeyHashFn(query.options)\n      if (query.queryHash !== hashFn(queryKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function getQueryKeyHashFn(\n  options?: QueryOptions<any, any>\n): QueryKeyHashFunction {\n  return options?.queryKeyHashFn || hashQueryKey\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return stableValueHash(queryKey)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(\n  a: string | unknown[],\n  b: string | unknown[]\n): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === 'loading',\n    isSuccess: status === 'success',\n    isError: status === 'error',\n    isIdle: status === 'idle',\n  }\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (onFocus: () => void) => (focused?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((focused?: boolean) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', onFocus, false)\n        window.addEventListener('focus', onFocus, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', onFocus)\n          window.removeEventListener('focus', onFocus)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: () => void) => (online?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        // Listen to online\n        window.addEventListener('online', onOnline, false)\n        window.addEventListener('offline', onOnline, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onOnline)\n          window.removeEventListener('offline', onOnline)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { functionalUpdate, sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue = number | RetryDelayFunction\n\ntype RetryDelayFunction = (failureCount: number) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay = functionalUpdate(retryDelay, this.failureCount) || 0\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  Updater,\n  ensureArray,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<TQueryFnData, TError, TData> {\n  cache: QueryCache\n  queryKey: QueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<TQueryFnData, TError, TData> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData>\n  queryKey: QueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  onFetch: (context: FetchContext<TQueryFnData, TError, TData>) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  queryKey: QueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData>\n  initialState: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(options: QueryOptions<TQueryFnData, TError, TData>): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(state: QueryState<TData, TError>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.willFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.willFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify(this)\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel()\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify(this)\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching)\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    // Create query function context\n    const queryKey = ensureArray(this.queryKey)\n    const queryFnContext: QueryFunctionContext = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData> = {\n      fetchOptions,\n      options: this.options,\n      queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: error => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (this.cache.config.onError) {\n            this.cache.config.onError(error, this as Query)\n          }\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify(this)\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert) {\n          let previousStatus: QueryStatus\n\n          if (!state.dataUpdatedAt && !state.errorUpdatedAt) {\n            previousStatus = 'idle'\n          } else if (state.dataUpdatedAt > state.errorUpdatedAt) {\n            previousStatus = 'success'\n          } else {\n            previousStatus = 'error'\n          }\n\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: previousStatus,\n          }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  getQueryKeyHashFn,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (query?: Query) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData> {\n    const hashFn = getQueryKeyHashFn(options)\n    const queryKey = options.queryKey!\n    const queryHash = options.queryHash ?? hashFn(queryKey)\n    let query = this.get<TQueryFnData, TError, TData>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify(query)\n    }\n  }\n\n  remove(query: Query<any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify(query)\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(query?: Query<any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(query)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        if (this.mutationCache.config.onError) {\n          this.mutationCache.config.onError(\n            error,\n            this.state.variables,\n            this.state.context,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        }\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          let cancelFn: undefined | (() => any)\n          const queryFnResult = queryFn(queryFnContext)\n          if ((queryFnResult as any).cancel) {\n            cancelFn = (queryFnResult as any).cancel\n          }\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (cancelFn) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = cancelFn\n          }\n\n          return promise\n        }\n\n        let promise\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        if (isCancelable(promise)) {\n          const finalPromiseAsAny = finalPromise as any\n          finalPromiseAsAny.cancel = promise.cancel\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.fetch())\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery(options: FetchQueryOptions): Promise<void>\n  prefetchQuery(queryKey: QueryKey, options?: FetchQueryOptions): Promise<void>\n  prefetchQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchQueryOptions\n  ): Promise<void>\n  prefetchQuery(\n    arg1: QueryKey | FetchQueryOptions,\n    arg2?: QueryFunction | FetchQueryOptions,\n    arg3?: FetchQueryOptions\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery(options: FetchInfiniteQueryOptions): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    arg1: QueryKey | FetchInfiniteQueryOptions,\n    arg2?: QueryFunction | FetchInfiniteQueryOptions,\n    arg3?: FetchInfiniteQueryOptions\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<T extends QueryOptions<any, any, any>>(options?: T): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  defaultQueryObserverOptions<\n    T extends QueryObserverOptions<any, any, any, any>\n  >(options?: T): T {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import {\n  getStatusProps,\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\ninterface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private previousOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private initialDataUpdateCount: number\n  private initialErrorUpdateCount: number\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private trackedProps!: Array<keyof QueryObserverResult>\n  private trackedCurrentResult!: QueryObserverResult<TData, TError>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.initialDataUpdateCount = 0\n    this.initialErrorUpdateCount = 0\n    this.trackedProps = []\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.updateQuery()\n\n      this.currentQuery.addObserver(this)\n\n      if (this.willFetchOnMount()) {\n        this.executeFetch()\n      }\n\n      this.updateResult()\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  willLoadOnMount(): boolean {\n    return (\n      this.options.enabled !== false &&\n      !this.currentQuery.state.dataUpdatedAt &&\n      !(\n        this.currentQuery.state.status === 'error' &&\n        this.options.retryOnMount === false\n      )\n    )\n  }\n\n  willRefetchOnMount(): boolean {\n    return (\n      this.options.enabled !== false &&\n      this.currentQuery.state.dataUpdatedAt > 0 &&\n      (this.options.refetchOnMount === 'always' ||\n        (this.options.refetchOnMount !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnMount(): boolean {\n    return this.willLoadOnMount() || this.willRefetchOnMount()\n  }\n\n  willFetchOnReconnect(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnReconnect === 'always' ||\n        (this.options.refetchOnReconnect !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnWindowFocus(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnWindowFocus === 'always' ||\n        (this.options.refetchOnWindowFocus !== false && this.isStale()))\n    )\n  }\n\n  private willFetchOptionally(): boolean {\n    return this.options.enabled !== false && this.isStale()\n  }\n\n  private isStale(): boolean {\n    return this.currentQuery.isStaleByTime(this.options.staleTime)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): void {\n    this.previousOptions = this.options\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = this.previousOptions.queryKey\n    }\n\n    const didUpdateQuery = this.updateQuery()\n\n    let optionalFetch\n    let updateResult\n    let updateStaleTimeout\n    let updateRefetchInterval\n\n    // If we subscribed to a new query, optionally fetch and update result and timers\n    if (didUpdateQuery) {\n      optionalFetch = true\n      updateResult = true\n      updateStaleTimeout = true\n      updateRefetchInterval = true\n    }\n\n    // Optionally fetch if the query became enabled\n    if (\n      this.options.enabled !== false &&\n      this.previousOptions.enabled === false\n    ) {\n      optionalFetch = true\n    }\n\n    // Update result if the select function changed\n    if (this.options.select !== this.previousOptions.select) {\n      updateResult = true\n    }\n\n    // Update stale interval if needed\n    if (\n      this.options.enabled !== this.previousOptions.enabled ||\n      this.options.staleTime !== this.previousOptions.staleTime\n    ) {\n      updateStaleTimeout = true\n    }\n\n    // Update refetch interval if needed\n    if (\n      this.options.enabled !== this.previousOptions.enabled ||\n      this.options.refetchInterval !== this.previousOptions.refetchInterval\n    ) {\n      updateRefetchInterval = true\n    }\n\n    // Fetch only if there are subscribers\n    if (this.hasListeners()) {\n      if (optionalFetch) {\n        this.optionalFetch()\n      }\n    }\n\n    if (updateResult) {\n      this.updateResult()\n    }\n\n    // Update intervals only if there are subscribers\n    if (this.hasListeners()) {\n      if (updateStaleTimeout) {\n        this.updateStaleTimeout()\n      }\n      if (updateRefetchInterval) {\n        this.updateRefetchInterval()\n      }\n    }\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  getTrackedCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.trackedCurrentResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private optionalFetch(): void {\n    if (this.willFetchOptionally()) {\n      this.executeFetch()\n    }\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected getNewResult(): QueryObserverResult<TData, TError> {\n    const { state } = this.currentQuery\n    let { isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n    let dataUpdatedAt = state.dataUpdatedAt\n\n    // Optimistically set status to loading if we will start fetching\n    if (!this.hasListeners() && this.willFetchOnMount()) {\n      isFetching = true\n      if (!dataUpdatedAt) {\n        status = 'loading'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      this.options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      this.previousQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = this.previousQueryResult.data\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt\n      status = this.previousQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n      // Use the previous select result if the query data and select function did not change\n      if (\n        this.currentResult &&\n        state.data === this.currentResultState?.data &&\n        this.options.select === this.previousOptions?.select\n      ) {\n        data = this.currentResult.data\n      } else {\n        data = this.options.select(state.data)\n        if (this.options.structuralSharing !== false) {\n          data = replaceEqualDeep(this.currentResult?.data, data)\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof this.options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      const placeholderData =\n        typeof this.options.placeholderData === 'function'\n          ? (this.options.placeholderData as PlaceholderDataFunction<TData>)()\n          : this.options.placeholderData\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      ...getStatusProps(status),\n      data,\n      dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > this.initialDataUpdateCount ||\n        state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    prevResult: QueryObserverResult | undefined,\n    result: QueryObserverResult\n  ): boolean {\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (prevResult === result) {\n      return false\n    }\n\n    if (!prevResult) {\n      return true\n    }\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    const keys = Object.keys(result)\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i] as keyof QueryObserverResult\n      const changed = prevResult[key] !== result[key]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n\n      if (changed) {\n        if (notifyOnChangePropsExclusions && isExcluded) {\n          continue\n        }\n\n        if (\n          !notifyOnChangeProps ||\n          isIncluded ||\n          (notifyOnChangeProps === 'tracked' && this.trackedProps.length === 0)\n        ) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  private updateResult(action?: Action<TData, TError>): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const result = this.getNewResult()\n\n    // Keep reference to the current state on which the current result is based on\n    this.currentResultState = this.currentQuery.state\n\n    // Only update if something has changed\n    if (shallowEqualObjects(result, prevResult)) {\n      return\n    }\n\n    this.currentResult = result\n\n    if (this.options.notifyOnChangeProps === 'tracked') {\n      const addTrackedProps = (prop: keyof QueryObserverResult) => {\n        if (!this.trackedProps.includes(prop)) {\n          this.trackedProps.push(prop)\n        }\n      }\n      this.trackedCurrentResult = {} as QueryObserverResult<TData, TError>\n\n      Object.keys(result).forEach(key => {\n        Object.defineProperty(this.trackedCurrentResult, key, {\n          configurable: false,\n          enumerable: true,\n          get() {\n            addTrackedProps(key as keyof QueryObserverResult)\n            return result[key as keyof QueryObserverResult]\n          },\n        })\n      })\n    }\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = { cache: true }\n\n    if (action?.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action?.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    if (this.shouldNotifyListeners(prevResult, result)) {\n      notifyOptions.listeners = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    if (query === prevQuery) {\n      return false\n    }\n\n    this.previousQueryResult = this.currentResult\n    this.currentQuery = query\n    this.initialDataUpdateCount = query.state.dataUpdateCount\n    this.initialErrorUpdateCount = query.state.errorUpdateCount\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      this.currentQuery.addObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    this.updateResult(action)\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify(this.currentQuery)\n      }\n    })\n  }\n}\n","import { difference, getQueryKeyHashFn, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = queries || []\n    this.result = []\n    this.observers = []\n\n    // Subscribe to queries\n    this.updateObservers()\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(queries: QueryObserverOptions[]): void {\n    this.queries = queries\n    this.updateObservers()\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  private updateObservers(): void {\n    let hasIndexChange = false\n\n    const prevObservers = this.observers\n    const newObservers = this.queries.map((options, i) => {\n      let observer: QueryObserver | undefined = prevObservers[i]\n\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      const hashFn = getQueryKeyHashFn(defaultedOptions)\n      defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey!)\n\n      if (\n        !observer ||\n        observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash\n      ) {\n        hasIndexChange = true\n        observer = prevObservers.find(\n          x => x.getCurrentQuery().queryHash === defaultedOptions.queryHash\n        )\n      }\n\n      if (observer) {\n        observer.setOptions(defaultedOptions)\n        return observer\n      }\n\n      return new QueryObserver(this.client, defaultedOptions)\n    })\n\n    if (prevObservers.length === newObservers.length && !hasIndexChange) {\n      return\n    }\n\n    this.observers = newObservers\n    this.result = newObservers.map(observer => observer.getCurrentResult())\n\n    if (!this.listeners.length) {\n      return\n    }\n\n    difference(prevObservers, newObservers).forEach(observer => {\n      observer.destroy()\n    })\n\n    difference(newObservers, prevObservers).forEach(observer => {\n      observer.subscribe(result => {\n        this.onUpdate(observer, result)\n      })\n    })\n\n    this.notify()\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior<TQueryFnData, TError, TData>(),\n    })\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected getNewResult(): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = this.getCurrentQuery()\n    const result = super.getNewResult()\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(this.options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(this.options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { getStatusProps } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      ...getStatusProps(state.status),\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\n\nconst QueryClientContext = (() => {\n  const context = React.createContext<QueryClient | undefined>(undefined)\n  if (typeof window !== 'undefined') {\n    // @ts-ignore\n    window.ReactQueryClientContext = context\n  }\n  return context\n})()\n\nfunction getQueryClientContext() {\n  return typeof window !== 'undefined'\n    ? // @ts-ignore\n      (window.ReactQueryClientContext as React.Context<\n        QueryClient | undefined\n      >) ?? QueryClientContext\n    : QueryClientContext\n}\n\nexport const useQueryClient = () => {\n  const queryClient = React.useContext(getQueryClientContext())\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n}\n\nexport const QueryClientProvider: React.FC<QueryClientProviderProps> = ({\n  client,\n  children,\n}) => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext()\n\n  return <Context.Provider value={client}>{children}</Context.Provider>\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary: React.FC<QueryErrorResetBoundaryProps> = ({\n  children,\n}) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useIsMounted() {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsMounted } from './useIsMounted'\n\nexport function useIsFetching(filters?: QueryFilters): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters\n): number {\n  const isMounted = useIsMounted()\n  const queryClient = useQueryClient()\n  const [filters] = parseFilterArgs(arg1, arg2)\n  const [isFetching, setIsFetching] = React.useState(\n    queryClient.isFetching(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isFetchingRef = React.useRef(isFetching)\n  isFetchingRef.current = isFetching\n\n  React.useEffect(\n    () =>\n      queryClient.getQueryCache().subscribe(\n        notifyManager.batchCalls(() => {\n          if (isMounted()) {\n            const newIsFetching = queryClient.isFetching(filtersRef.current)\n            if (isFetchingRef.current !== newIsFetching) {\n              setIsFetching(newIsFetching)\n            }\n          }\n        })\n      ),\n    [queryClient, isMounted]\n  )\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport {\n  MutationFunction,\n  MutationKey,\n  MutationObserverResult,\n} from '../core/types'\nimport { useIsMounted } from './useIsMounted'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const isMounted = useIsMounted()\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient()\n\n  // Create mutation observer\n  const observerRef = React.useRef<\n    MutationObserver<TData, TError, TVariables, TContext>\n  >()\n  const observer =\n    observerRef.current || new MutationObserver(queryClient, options)\n  observerRef.current = observer\n\n  // Update options\n  if (observer.hasListeners()) {\n    observer.setOptions(options)\n  }\n\n  const [currentResult, setCurrentResult] = React.useState(() =>\n    observer.getCurrentResult()\n  )\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(\n        notifyManager.batchCalls(\n          (\n            result: MutationObserverResult<TData, TError, TVariables, TContext>\n          ) => {\n            if (isMounted()) {\n              setCurrentResult(result)\n            }\n          }\n        )\n      ),\n    [observer, isMounted]\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer]\n  )\n\n  if (currentResult.error && observer.options.useErrorBoundary) {\n    throw currentResult.error\n  }\n\n  return { ...currentResult, mutate, mutateAsync: currentResult.mutate }\n}\n","import React from 'react'\n\nimport { QueryObserverResult } from '../core/types'\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryObserver } from '../core/queryObserver'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\nimport { useIsMounted } from './useIsMounted'\n\nexport function useBaseQuery<TQueryFnData, TError, TData, TQueryData>(\n  options: UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData>,\n  Observer: typeof QueryObserver\n) {\n  const isMounted = useIsMounted()\n  const queryClient = useQueryClient()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<any, any, any, any>>()\n  const observer =\n    observerRef.current || new Observer(queryClient, defaultedOptions)\n  observerRef.current = observer\n\n  // Update options\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions)\n  }\n\n  const currentResult = observer.getCurrentResult()\n  const [, setCurrentResult] = React.useState(currentResult)\n\n  // Subscribe to the observer\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n    return observer.subscribe(\n      notifyManager.batchCalls((result: QueryObserverResult) => {\n        if (isMounted()) {\n          setCurrentResult(result)\n        }\n      })\n    )\n  }, [observer, errorResetBoundary, isMounted])\n\n  // Handle suspense\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset()\n      const unsubscribe = observer.subscribe()\n      throw observer.refetch().finally(unsubscribe)\n    }\n\n    if (currentResult.isError) {\n      throw currentResult.error\n    }\n  }\n\n  return observer.options.notifyOnChangeProps === 'tracked'\n    ? observer.getTrackedCurrentResult()\n    : currentResult\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import React from 'react'\n\nimport { QueryObserverResult } from '../core/types'\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsMounted } from './useIsMounted'\n\nexport function useQueries(queries: UseQueryOptions[]): UseQueryResult[] {\n  const isMounted = useIsMounted()\n  const queryClient = useQueryClient()\n\n  // Create queries observer\n  const observerRef = React.useRef<QueriesObserver>()\n  const observer =\n    observerRef.current || new QueriesObserver(queryClient, queries)\n  observerRef.current = observer\n\n  // Update queries\n  if (observer.hasListeners()) {\n    observer.setQueries(queries)\n  }\n\n  const [currentResult, setCurrentResult] = React.useState(() =>\n    observer.getCurrentResult()\n  )\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(\n        notifyManager.batchCalls((result: QueryObserverResult[]) => {\n          if (isMounted()) {\n            setCurrentResult(result)\n          }\n        })\n      ),\n    [observer, isMounted]\n  )\n\n  return currentResult\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","undefined","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureArray","Array","isArray","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","hashFn","getQueryKeyHashFn","options","queryHash","partialMatchKey","isActive","isStale","isFetching","queryKeyHashFn","hashQueryKey","stableValueHash","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","aSize","bItems","bSize","equalItems","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","toString","isError","Error","sleep","timeout","Promise","resolve","setTimeout","getStatusProps","status","isLoading","isSuccess","isIdle","scheduleMicrotask","then","catch","error","FocusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","includes","visibilityState","addEventListener","focusManager","OnlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","retry","retryDelay","delay","shouldRetry","onFail","NotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","notifyManager","logger","console","warn","log","getLogger","setLogger","newLogger","Query","defaultOptions","setOptions","observers","cache","initialState","state","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","willFetchOnWindowFocus","refetch","willFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","fetchFn","context","behavior","onFetch","fetchMeta","meta","action","reducer","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","previousStatus","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","onMutationUpdate","MutationCache","mutations","mutation","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","fetchPage","manual","param","previous","queryFnResult","page","promiseAsAny","getNextPageParam","getPreviousPageParam","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","getQueryData","setQueryData","parsedOptions","defaultedOptions","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","map","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getQueryCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","initialDataUpdateCount","initialErrorUpdateCount","trackedProps","bindMethods","bind","updateQuery","currentQuery","willFetchOnMount","executeFetch","updateResult","updateTimers","willLoadOnMount","retryOnMount","willRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","willFetchOptionally","clearTimers","previousOptions","didUpdateQuery","optionalFetch","updateStaleTimeout","updateRefetchInterval","select","refetchInterval","currentResult","getTrackedCurrentResult","trackedCurrentResult","getNextResult","unsubscribe","getCurrentQuery","clearStaleTimeout","time","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","getNewResult","isPreviousData","isPlaceholderData","keepPreviousData","previousQueryResult","currentResultState","placeholderData","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","prevResult","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","addTrackedProps","prop","defineProperty","configurable","enumerable","notifyOptions","prevQuery","QueriesObserver","updateObservers","onUpdate","setQueries","hasIndexChange","prevObservers","newObservers","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","QueryClientContext","React","createContext","ReactQueryClientContext","getQueryClientContext","useQueryClient","queryClient","useContext","QueryClientProvider","children","useEffect","Context","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","QueryErrorResetBoundary","useMemo","useIsMounted","mountedRef","useRef","isMounted","useCallback","current","useIsFetching","useState","setIsFetching","filtersRef","isFetchingRef","newIsFetching","useMutation","observerRef","setCurrentResult","useErrorBoundary","mutateAsync","useBaseQuery","Observer","errorResetBoundary","suspense","finally","useQuery","useQueries","useInfiniteQuery"],"mappings":"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"}