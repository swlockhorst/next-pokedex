{"version":3,"file":"react-query.production.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/react/QueryClientProvider.tsx","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/react/QueryErrorResetBoundary.tsx","../src/react/useIsMounted.ts","../src/react/useBaseQuery.ts","../src/react/useInfiniteQuery.ts","../src/react/useIsFetching.ts","../src/react/useMutation.ts","../src/react/useQueries.ts","../src/react/useQuery.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryKeyHashFunction,\n  QueryOptions,\n  QueryStatus,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<TOptions extends QueryOptions<any, any, any>>(\n  arg1: QueryKey | TOptions,\n  arg2?: QueryFunction<any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      const hashFn = getQueryKeyHashFn(query.options)\n      if (query.queryHash !== hashFn(queryKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function getQueryKeyHashFn(\n  options?: QueryOptions<any, any>\n): QueryKeyHashFunction {\n  return options?.queryKeyHashFn || hashQueryKey\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return stableValueHash(queryKey)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(\n  a: string | unknown[],\n  b: string | unknown[]\n): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === 'loading',\n    isSuccess: status === 'success',\n    isError: status === 'error',\n    isIdle: status === 'idle',\n  }\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (onFocus: () => void) => (focused?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((focused?: boolean) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', onFocus, false)\n        window.addEventListener('focus', onFocus, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', onFocus)\n          window.removeEventListener('focus', onFocus)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: () => void) => (online?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        // Listen to online\n        window.addEventListener('online', onOnline, false)\n        window.addEventListener('offline', onOnline, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onOnline)\n          window.removeEventListener('offline', onOnline)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { functionalUpdate, sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue = number | RetryDelayFunction\n\ntype RetryDelayFunction = (failureCount: number) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay = functionalUpdate(retryDelay, this.failureCount) || 0\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  Updater,\n  ensureArray,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<TQueryFnData, TError, TData> {\n  cache: QueryCache\n  queryKey: QueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<TQueryFnData, TError, TData> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData>\n  queryKey: QueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  onFetch: (context: FetchContext<TQueryFnData, TError, TData>) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  queryKey: QueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData>\n  initialState: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(options: QueryOptions<TQueryFnData, TError, TData>): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(state: QueryState<TData, TError>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.willFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.willFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify(this)\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel()\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify(this)\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching)\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    // Create query function context\n    const queryKey = ensureArray(this.queryKey)\n    const queryFnContext: QueryFunctionContext = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData> = {\n      fetchOptions,\n      options: this.options,\n      queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: error => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (this.cache.config.onError) {\n            this.cache.config.onError(error, this as Query)\n          }\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify(this)\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert) {\n          let previousStatus: QueryStatus\n\n          if (!state.dataUpdatedAt && !state.errorUpdatedAt) {\n            previousStatus = 'idle'\n          } else if (state.dataUpdatedAt > state.errorUpdatedAt) {\n            previousStatus = 'success'\n          } else {\n            previousStatus = 'error'\n          }\n\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: previousStatus,\n          }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  getQueryKeyHashFn,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (query?: Query) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData> {\n    const hashFn = getQueryKeyHashFn(options)\n    const queryKey = options.queryKey!\n    const queryHash = options.queryHash ?? hashFn(queryKey)\n    let query = this.get<TQueryFnData, TError, TData>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify(query)\n    }\n  }\n\n  remove(query: Query<any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify(query)\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(query?: Query<any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(query)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        if (this.mutationCache.config.onError) {\n          this.mutationCache.config.onError(\n            error,\n            this.state.variables,\n            this.state.context,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        }\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          let cancelFn: undefined | (() => any)\n          const queryFnResult = queryFn(queryFnContext)\n          if ((queryFnResult as any).cancel) {\n            cancelFn = (queryFnResult as any).cancel\n          }\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (cancelFn) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = cancelFn\n          }\n\n          return promise\n        }\n\n        let promise\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        if (isCancelable(promise)) {\n          const finalPromiseAsAny = finalPromise as any\n          finalPromiseAsAny.cancel = promise.cancel\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\n\nconst QueryClientContext = (() => {\n  const context = React.createContext<QueryClient | undefined>(undefined)\n  if (typeof window !== 'undefined') {\n    // @ts-ignore\n    window.ReactQueryClientContext = context\n  }\n  return context\n})()\n\nfunction getQueryClientContext() {\n  return typeof window !== 'undefined'\n    ? // @ts-ignore\n      (window.ReactQueryClientContext as React.Context<\n        QueryClient | undefined\n      >) ?? QueryClientContext\n    : QueryClientContext\n}\n\nexport const useQueryClient = () => {\n  const queryClient = React.useContext(getQueryClientContext())\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n}\n\nexport const QueryClientProvider: React.FC<QueryClientProviderProps> = ({\n  client,\n  children,\n}) => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext()\n\n  return <Context.Provider value={client}>{children}</Context.Provider>\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.fetch())\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery(options: FetchQueryOptions): Promise<void>\n  prefetchQuery(queryKey: QueryKey, options?: FetchQueryOptions): Promise<void>\n  prefetchQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchQueryOptions\n  ): Promise<void>\n  prefetchQuery(\n    arg1: QueryKey | FetchQueryOptions,\n    arg2?: QueryFunction | FetchQueryOptions,\n    arg3?: FetchQueryOptions\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery(options: FetchInfiniteQueryOptions): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    arg1: QueryKey | FetchInfiniteQueryOptions,\n    arg2?: QueryFunction | FetchInfiniteQueryOptions,\n    arg3?: FetchInfiniteQueryOptions\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<T extends QueryOptions<any, any, any>>(options?: T): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  defaultQueryObserverOptions<\n    T extends QueryObserverOptions<any, any, any, any>\n  >(options?: T): T {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import {\n  getStatusProps,\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\ninterface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private previousOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private initialDataUpdateCount: number\n  private initialErrorUpdateCount: number\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private trackedProps!: Array<keyof QueryObserverResult>\n  private trackedCurrentResult!: QueryObserverResult<TData, TError>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.initialDataUpdateCount = 0\n    this.initialErrorUpdateCount = 0\n    this.trackedProps = []\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.updateQuery()\n\n      this.currentQuery.addObserver(this)\n\n      if (this.willFetchOnMount()) {\n        this.executeFetch()\n      }\n\n      this.updateResult()\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  willLoadOnMount(): boolean {\n    return (\n      this.options.enabled !== false &&\n      !this.currentQuery.state.dataUpdatedAt &&\n      !(\n        this.currentQuery.state.status === 'error' &&\n        this.options.retryOnMount === false\n      )\n    )\n  }\n\n  willRefetchOnMount(): boolean {\n    return (\n      this.options.enabled !== false &&\n      this.currentQuery.state.dataUpdatedAt > 0 &&\n      (this.options.refetchOnMount === 'always' ||\n        (this.options.refetchOnMount !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnMount(): boolean {\n    return this.willLoadOnMount() || this.willRefetchOnMount()\n  }\n\n  willFetchOnReconnect(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnReconnect === 'always' ||\n        (this.options.refetchOnReconnect !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnWindowFocus(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnWindowFocus === 'always' ||\n        (this.options.refetchOnWindowFocus !== false && this.isStale()))\n    )\n  }\n\n  private willFetchOptionally(): boolean {\n    return this.options.enabled !== false && this.isStale()\n  }\n\n  private isStale(): boolean {\n    return this.currentQuery.isStaleByTime(this.options.staleTime)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): void {\n    this.previousOptions = this.options\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = this.previousOptions.queryKey\n    }\n\n    const didUpdateQuery = this.updateQuery()\n\n    let optionalFetch\n    let updateResult\n    let updateStaleTimeout\n    let updateRefetchInterval\n\n    // If we subscribed to a new query, optionally fetch and update result and timers\n    if (didUpdateQuery) {\n      optionalFetch = true\n      updateResult = true\n      updateStaleTimeout = true\n      updateRefetchInterval = true\n    }\n\n    // Optionally fetch if the query became enabled\n    if (\n      this.options.enabled !== false &&\n      this.previousOptions.enabled === false\n    ) {\n      optionalFetch = true\n    }\n\n    // Update result if the select function changed\n    if (this.options.select !== this.previousOptions.select) {\n      updateResult = true\n    }\n\n    // Update stale interval if needed\n    if (\n      this.options.enabled !== this.previousOptions.enabled ||\n      this.options.staleTime !== this.previousOptions.staleTime\n    ) {\n      updateStaleTimeout = true\n    }\n\n    // Update refetch interval if needed\n    if (\n      this.options.enabled !== this.previousOptions.enabled ||\n      this.options.refetchInterval !== this.previousOptions.refetchInterval\n    ) {\n      updateRefetchInterval = true\n    }\n\n    // Fetch only if there are subscribers\n    if (this.hasListeners()) {\n      if (optionalFetch) {\n        this.optionalFetch()\n      }\n    }\n\n    if (updateResult) {\n      this.updateResult()\n    }\n\n    // Update intervals only if there are subscribers\n    if (this.hasListeners()) {\n      if (updateStaleTimeout) {\n        this.updateStaleTimeout()\n      }\n      if (updateRefetchInterval) {\n        this.updateRefetchInterval()\n      }\n    }\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  getTrackedCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.trackedCurrentResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private optionalFetch(): void {\n    if (this.willFetchOptionally()) {\n      this.executeFetch()\n    }\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected getNewResult(): QueryObserverResult<TData, TError> {\n    const { state } = this.currentQuery\n    let { isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n    let dataUpdatedAt = state.dataUpdatedAt\n\n    // Optimistically set status to loading if we will start fetching\n    if (!this.hasListeners() && this.willFetchOnMount()) {\n      isFetching = true\n      if (!dataUpdatedAt) {\n        status = 'loading'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      this.options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      this.previousQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = this.previousQueryResult.data\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt\n      status = this.previousQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n      // Use the previous select result if the query data and select function did not change\n      if (\n        this.currentResult &&\n        state.data === this.currentResultState?.data &&\n        this.options.select === this.previousOptions?.select\n      ) {\n        data = this.currentResult.data\n      } else {\n        data = this.options.select(state.data)\n        if (this.options.structuralSharing !== false) {\n          data = replaceEqualDeep(this.currentResult?.data, data)\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof this.options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      const placeholderData =\n        typeof this.options.placeholderData === 'function'\n          ? (this.options.placeholderData as PlaceholderDataFunction<TData>)()\n          : this.options.placeholderData\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      ...getStatusProps(status),\n      data,\n      dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > this.initialDataUpdateCount ||\n        state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    prevResult: QueryObserverResult | undefined,\n    result: QueryObserverResult\n  ): boolean {\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (prevResult === result) {\n      return false\n    }\n\n    if (!prevResult) {\n      return true\n    }\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    const keys = Object.keys(result)\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i] as keyof QueryObserverResult\n      const changed = prevResult[key] !== result[key]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n\n      if (changed) {\n        if (notifyOnChangePropsExclusions && isExcluded) {\n          continue\n        }\n\n        if (\n          !notifyOnChangeProps ||\n          isIncluded ||\n          (notifyOnChangeProps === 'tracked' && this.trackedProps.length === 0)\n        ) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  private updateResult(action?: Action<TData, TError>): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const result = this.getNewResult()\n\n    // Keep reference to the current state on which the current result is based on\n    this.currentResultState = this.currentQuery.state\n\n    // Only update if something has changed\n    if (shallowEqualObjects(result, prevResult)) {\n      return\n    }\n\n    this.currentResult = result\n\n    if (this.options.notifyOnChangeProps === 'tracked') {\n      const addTrackedProps = (prop: keyof QueryObserverResult) => {\n        if (!this.trackedProps.includes(prop)) {\n          this.trackedProps.push(prop)\n        }\n      }\n      this.trackedCurrentResult = {} as QueryObserverResult<TData, TError>\n\n      Object.keys(result).forEach(key => {\n        Object.defineProperty(this.trackedCurrentResult, key, {\n          configurable: false,\n          enumerable: true,\n          get() {\n            addTrackedProps(key as keyof QueryObserverResult)\n            return result[key as keyof QueryObserverResult]\n          },\n        })\n      })\n    }\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = { cache: true }\n\n    if (action?.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action?.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    if (this.shouldNotifyListeners(prevResult, result)) {\n      notifyOptions.listeners = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    if (query === prevQuery) {\n      return false\n    }\n\n    this.previousQueryResult = this.currentResult\n    this.currentQuery = query\n    this.initialDataUpdateCount = query.state.dataUpdateCount\n    this.initialErrorUpdateCount = query.state.errorUpdateCount\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      this.currentQuery.addObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    this.updateResult(action)\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify(this.currentQuery)\n      }\n    })\n  }\n}\n","import { difference, getQueryKeyHashFn, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = queries || []\n    this.result = []\n    this.observers = []\n\n    // Subscribe to queries\n    this.updateObservers()\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(queries: QueryObserverOptions[]): void {\n    this.queries = queries\n    this.updateObservers()\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  private updateObservers(): void {\n    let hasIndexChange = false\n\n    const prevObservers = this.observers\n    const newObservers = this.queries.map((options, i) => {\n      let observer: QueryObserver | undefined = prevObservers[i]\n\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      const hashFn = getQueryKeyHashFn(defaultedOptions)\n      defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey!)\n\n      if (\n        !observer ||\n        observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash\n      ) {\n        hasIndexChange = true\n        observer = prevObservers.find(\n          x => x.getCurrentQuery().queryHash === defaultedOptions.queryHash\n        )\n      }\n\n      if (observer) {\n        observer.setOptions(defaultedOptions)\n        return observer\n      }\n\n      return new QueryObserver(this.client, defaultedOptions)\n    })\n\n    if (prevObservers.length === newObservers.length && !hasIndexChange) {\n      return\n    }\n\n    this.observers = newObservers\n    this.result = newObservers.map(observer => observer.getCurrentResult())\n\n    if (!this.listeners.length) {\n      return\n    }\n\n    difference(prevObservers, newObservers).forEach(observer => {\n      observer.destroy()\n    })\n\n    difference(newObservers, prevObservers).forEach(observer => {\n      observer.subscribe(result => {\n        this.onUpdate(observer, result)\n      })\n    })\n\n    this.notify()\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior<TQueryFnData, TError, TData>(),\n    })\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected getNewResult(): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = this.getCurrentQuery()\n    const result = super.getNewResult()\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(this.options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(this.options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { getStatusProps } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      ...getStatusProps(state.status),\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary: React.FC<QueryErrorResetBoundaryProps> = ({\n  children,\n}) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useIsMounted() {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n","import React from 'react'\n\nimport { QueryObserverResult } from '../core/types'\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryObserver } from '../core/queryObserver'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\nimport { useIsMounted } from './useIsMounted'\n\nexport function useBaseQuery<TQueryFnData, TError, TData, TQueryData>(\n  options: UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData>,\n  Observer: typeof QueryObserver\n) {\n  const isMounted = useIsMounted()\n  const queryClient = useQueryClient()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<any, any, any, any>>()\n  const observer =\n    observerRef.current || new Observer(queryClient, defaultedOptions)\n  observerRef.current = observer\n\n  // Update options\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions)\n  }\n\n  const currentResult = observer.getCurrentResult()\n  const [, setCurrentResult] = React.useState(currentResult)\n\n  // Subscribe to the observer\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n    return observer.subscribe(\n      notifyManager.batchCalls((result: QueryObserverResult) => {\n        if (isMounted()) {\n          setCurrentResult(result)\n        }\n      })\n    )\n  }, [observer, errorResetBoundary, isMounted])\n\n  // Handle suspense\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset()\n      const unsubscribe = observer.subscribe()\n      throw observer.refetch().finally(unsubscribe)\n    }\n\n    if (currentResult.isError) {\n      throw currentResult.error\n    }\n  }\n\n  return observer.options.notifyOnChangeProps === 'tracked'\n    ? observer.getTrackedCurrentResult()\n    : currentResult\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsMounted } from './useIsMounted'\n\nexport function useIsFetching(filters?: QueryFilters): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters\n): number {\n  const isMounted = useIsMounted()\n  const queryClient = useQueryClient()\n  const [filters] = parseFilterArgs(arg1, arg2)\n  const [isFetching, setIsFetching] = React.useState(\n    queryClient.isFetching(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isFetchingRef = React.useRef(isFetching)\n  isFetchingRef.current = isFetching\n\n  React.useEffect(\n    () =>\n      queryClient.getQueryCache().subscribe(\n        notifyManager.batchCalls(() => {\n          if (isMounted()) {\n            const newIsFetching = queryClient.isFetching(filtersRef.current)\n            if (isFetchingRef.current !== newIsFetching) {\n              setIsFetching(newIsFetching)\n            }\n          }\n        })\n      ),\n    [queryClient, isMounted]\n  )\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport {\n  MutationFunction,\n  MutationKey,\n  MutationObserverResult,\n} from '../core/types'\nimport { useIsMounted } from './useIsMounted'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const isMounted = useIsMounted()\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient()\n\n  // Create mutation observer\n  const observerRef = React.useRef<\n    MutationObserver<TData, TError, TVariables, TContext>\n  >()\n  const observer =\n    observerRef.current || new MutationObserver(queryClient, options)\n  observerRef.current = observer\n\n  // Update options\n  if (observer.hasListeners()) {\n    observer.setOptions(options)\n  }\n\n  const [currentResult, setCurrentResult] = React.useState(() =>\n    observer.getCurrentResult()\n  )\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(\n        notifyManager.batchCalls(\n          (\n            result: MutationObserverResult<TData, TError, TVariables, TContext>\n          ) => {\n            if (isMounted()) {\n              setCurrentResult(result)\n            }\n          }\n        )\n      ),\n    [observer, isMounted]\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer]\n  )\n\n  if (currentResult.error && observer.options.useErrorBoundary) {\n    throw currentResult.error\n  }\n\n  return { ...currentResult, mutate, mutateAsync: currentResult.mutate }\n}\n","import React from 'react'\n\nimport { QueryObserverResult } from '../core/types'\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsMounted } from './useIsMounted'\n\nexport function useQueries(queries: UseQueryOptions[]): UseQueryResult[] {\n  const isMounted = useIsMounted()\n  const queryClient = useQueryClient()\n\n  // Create queries observer\n  const observerRef = React.useRef<QueriesObserver>()\n  const observer =\n    observerRef.current || new QueriesObserver(queryClient, queries)\n  observerRef.current = observer\n\n  // Update queries\n  if (observer.hasListeners()) {\n    observer.setQueries(queries)\n  }\n\n  const [currentResult, setCurrentResult] = React.useState(() =>\n    observer.getCurrentResult()\n  )\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(\n        notifyManager.batchCalls((result: QueryObserverResult[]) => {\n          if (isMounted()) {\n            setCurrentResult(result)\n          }\n        })\n      ),\n    [observer, isMounted]\n  )\n\n  return currentResult\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","push","onSubscribe","_this","filter","x","onUnsubscribe","hasListeners","this","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureArray","Array","isArray","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","isActive","active","exact","fetching","inactive","predicate","stale","hashFn","getQueryKeyHashFn","options","queryHash","partialMatchKey","isStale","isFetching","queryKeyHashFn","hashQueryKey","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","array","aSize","bItems","bSize","copy","equalItems","o","hasObjectPrototype","ctor","prot","toString","getStatusProps","status","isLoading","isSuccess","isError","isIdle","scheduleMicrotask","Promise","resolve","then","catch","error","setTimeout","focusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","undefined","includes","visibilityState","_window","addEventListener","onlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelFn","continueFn","promiseResolve","promiseReject","cancelRetry","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","run","promiseOrValue","fn","timeout","retry","delay","retryDelay","shouldRetry","onFail","continueResolve","onPause","onContinue","notifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","_this2","_this3","setNotifyFunction","setBatchNotifyFunction","logger","console","warn","log","getLogger","Query","defaultOptions","setOptions","observers","cache","initialState","state","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","_this$options$isDataE","structuralSharing","dispatch","type","dataUpdatedAt","setState","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","willFetchOnWindowFocus","refetch","willFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","context","fetchFn","behavior","_this$options$behavio","onFetch","fetchMeta","_context$fetchOptions","meta","_context$fetchOptions2","action","reducer","onQueryUpdate","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","_this4","_this5","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","mutationFn","onMutationUpdate","MutationCache","mutations","mutation","defaultMutationOptions","mutationKey","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","fetchPage","manual","param","previous","queryFnResult","page","getNextPageParam","getPreviousPageParam","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","getQueryData","_this$queryCache$find","setQueryData","parsedOptions","defaultedOptions","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","map","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","_this6","getMutationCache","getQueryCache","getDefaultOptions","setQueryDefaults","_this$queryDefaults$f","setMutationDefaults","_this$mutationDefault","_defaulted","defaultQueryObserverOptions","QueryObserver","initialDataUpdateCount","initialErrorUpdateCount","trackedProps","bindMethods","bind","updateQuery","currentQuery","willFetchOnMount","executeFetch","updateResult","updateTimers","willLoadOnMount","retryOnMount","willRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","willFetchOptionally","clearTimers","previousOptions","Error","optionalFetch","updateStaleTimeout","updateRefetchInterval","select","refetchInterval","currentResult","getTrackedCurrentResult","trackedCurrentResult","getNextResult","unsubscribe","getCurrentQuery","clearStaleTimeout","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","getNewResult","isPreviousData","isPlaceholderData","keepPreviousData","previousQueryResult","_this$previousQueryRe","currentResultState","_this$currentResultSt","_this$previousOptions","_this$currentResult","placeholderData","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","prevResult","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","shallowEqualObjects","defineProperty","_this7","configurable","enumerable","prop","notifyOptions","prevQuery","_this8","QueriesObserver","updateObservers","onUpdate","setQueries","hasIndexChange","prevObservers","newObservers","index","slice","replaceAt","InfiniteQueryObserver","_QueryObserver","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","MutationObserver","mutate","currentMutation","mutateOptions","QueryClientContext","React","createContext","ReactQueryClientContext","getQueryClientContext","useQueryClient","queryClient","useContext","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","useIsMounted","mountedRef","useRef","isMounted","useCallback","current","useBaseQuery","Observer","errorResetBoundary","suspense","observerRef","setCurrentResult","useState","useEffect","useErrorBoundary","finally","children","Context","Provider","useMemo","newLogger","setIsFetching","filtersRef","isFetchingRef","newIsFetching","parseMutationArgs","mutateAsync"],"mappings":"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"}