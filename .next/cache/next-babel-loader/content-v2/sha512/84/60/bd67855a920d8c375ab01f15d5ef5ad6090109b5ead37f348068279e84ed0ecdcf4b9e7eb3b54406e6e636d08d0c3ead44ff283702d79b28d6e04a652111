{"ast":null,"code":"import _regeneratorRuntime from \"/Users/stevenlockhorst/Projects/next-pokedex/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/stevenlockhorst/Projects/next-pokedex/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Pokedex } from \"pokeapi-js-wrapper\";\nvar P = new Pokedex();\nexport var fetchPokemonByName = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return P.getPokemonByName(name);\n\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function fetchPokemonByName(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/stevenlockhorst/Projects/next-pokedex/api/pokemonApi.ts"],"names":["Pokedex","P","fetchPokemonByName","name","getPokemonByName","res"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAGA,IAAMC,CAAC,GAAG,IAAID,OAAJ,EAAV;AAEA,OAAO,IAAME,kBAAkB;AAAA,sEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEZF,CAAC,CAACG,gBAAF,CAAmBD,IAAnB,CAFY;;AAAA;AAExBE,YAAAA,GAFwB;AAAA,6CAGvBA,GAHuB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBH,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["import { Pokedex } from \"pokeapi-js-wrapper\";\nimport { ParsedUrlQuery } from \"querystring\";\n\nconst P = new Pokedex();\n\nexport const fetchPokemonByName = async (name: ParsedUrlQuery | string) => {\n  try {\n    const res = await P.getPokemonByName(name);\n    return res;\n  } catch (error) {\n    return error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}