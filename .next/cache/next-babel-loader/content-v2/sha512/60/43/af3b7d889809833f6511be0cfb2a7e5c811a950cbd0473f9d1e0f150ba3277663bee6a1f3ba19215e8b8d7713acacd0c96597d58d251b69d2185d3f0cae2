{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/stevenlockhorst/Projects/next-pokedex/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/stevenlockhorst/Projects/next-pokedex/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/stevenlockhorst/Projects/next-pokedex/pages/[name].tsx\",\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/dist/client/router\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction Detail() {\n  _s();\n\n  var router = useRouter();\n\n  var _useState = useState(null),\n      data = _useState[0],\n      setData = _useState[1];\n\n  console.log(router.query.name);\n  useEffect(function () {\n    /*#__PURE__*/\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"fuck\");\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })); // const res = fetchPokemonByName(router.query.name);\n    // setData(res);\n\n  }, []);\n  useEffect(function () {\n    console.log(data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Detail, \"gH/cEcofSfD57/O8KUhmBvOq0wg=\", false, function () {\n  return [useRouter];\n});\n\n_c = Detail;\nexport default Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["/Users/stevenlockhorst/Projects/next-pokedex/pages/[name].tsx"],"names":["useRouter","React","useEffect","useState","Detail","router","data","setData","console","log","query","name"],"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AADgB,kBAEQG,QAAQ,CAAC,IAAD,CAFhB;AAAA,MAETG,IAFS;AAAA,MAEHC,OAFG;;AAGhBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,KAAP,CAAaC,IAAzB;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AACEM,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADc,CAId;AACA;;AACD,GANQ,EAMN,EANM,CAAT;AAQAP,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADF;AAuGD;;GAxHQF,M;UACQJ,S;;;KADRI,M;AA0HT,eAAeA,MAAf","sourcesContent":["import { useRouter } from \"next/dist/client/router\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction Detail() {\n  const router = useRouter();\n  const [data, setData] = useState(null);\n  console.log(router.query.name);\n\n  useEffect(() => {\n    async () => {\n      console.log(\"fuck\");\n    };\n    // const res = fetchPokemonByName(router.query.name);\n    // setData(res);\n  }, []);\n\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  return (\n    <div className=\"container\">\n      {/* {data && (\n        <>\n          <Head>\n            <title>{data.name}</title>\n            <link rel=\"icon\" href=\"/favicon.ico\" />\n          </Head>\n\n          <main>\n            <Container className=\"p-4\">\n              <Row>\n                <Col lg=\"5\" className=\"mb-3\">\n                  <Card className=\"p-2\">\n                    <Card.Img\n                      variant=\"top\"\n                      src={data.sprites.other.dream_world.front_default}\n                    />\n                    <Card.Body>\n                      <Card.Title>{data.name}</Card.Title>\n\n                      <Card.Text>\n                        Species: {data.species.name}\n                        <br />\n                        Base XP: {data.base_experience}\n                        <br />\n                        Height: {data.height}\n                        <br />\n                        Weight: {data.weight}\n                      </Card.Text>\n                    </Card.Body>\n                  </Card>\n                </Col>\n\n                <Col>\n                  <Table striped bordered hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>Hidden</th>\n                        <th>Slot</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {data.abilities.map((item, index) => {\n                        return (\n                          <tr key={index}>\n                            <td>{item.ability.name}</td>\n                            <td>{item.is_hidden ? \"Yes\" : \"No\"}</td>\n                            <td>{item.slot}</td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </Table>\n\n                  <Table striped bordered hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>Base State</th>\n                        <th>Effort</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {data.stats.map((item, index) => {\n                        return (\n                          <tr key={index}>\n                            <td>{item.stat.name}</td>\n                            <td>{item.base_stat}</td>\n                            <td>{item.effort}</td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </Table>\n\n                  <Table striped bordered hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Slot</th>\n                        <th>Type</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {data.types.map((item, index) => {\n                        return (\n                          <tr key={index}>\n                            <td>{item.slot}</td>\n                            <td>{item.type.name}</td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n            </Container>\n          </main>\n        </>\n      )} */}\n    </div>\n  );\n}\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}